import matplotlib
import matplotlib.pyplot as plt
import folium as folium
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
from folium.plugins import FastMarkerCluster
from geopy import distance
import networkx as nx
from matplotlib.pyplot import figure
from shapely.geometry import Point
from streamlit_folium import st_folium, folium_static
import plotly.express as px
from geopy.geocoders import Nominatim

with st.echo(code_location='below'):
    matplotlib.use("Agg")
    st.set_option('deprecation.showPyplotGlobalUse', False)

    @st.cache(persist=True, show_spinner=True)
    def get_data(rows):
        data_url = "https://github.com/fatcat-klm/vsosh/raw/main/flavors_of_cacao%20(2)%20-%20flavors_of_cacao%20(2)%20(3).csv.zip"
        df = pd.read_csv(data_url, nrows=rows)
        return df

    df = get_data(1790)
    st.sidebar.subheader('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    st.sidebar.subheader('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
    st.title("### –†–µ–π—Ç–∏–Ω–≥ —à–æ–∫–æ–ª–∞–¥–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏—Ö —É—á—ë–Ω—ã—Ö")
    img_1 = "https://github.com/fatcat-klm/vsosh/blob/main/e65ea183f8fac51d87ac25e68176f1b9.jpg?raw=true"
    st.image(img_1, width=500)
    st.markdown("–í—Å–µ –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ –ª—é–¥–µ–π —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–µ–∑–∂–∞–µ—Ç –∏–∑ –†–æ—Å—Å–∏–∏ –≤ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã. –ü—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏–∏ –ª—é–¥–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–æ–π —à–æ–∫–æ–ª–∞–¥ –µ—Å—Ç—å –≤ –ê–º–µ—Ä–∏–∫–µ, –µ—Å–ª–∏ —Ä–æ–¥–Ω–µ–Ω—å–∫–æ–π '–ê–ª—ë–Ω–∫–∏' –Ω–µ—Ç –Ω–∞ –ø—Ä–∏–ª–∞–≤–∫–µ? –ü—Ä–µ–∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏ —É–∑–Ω–∞—Ç—å –≤—Å–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç! ")
    if st.button("–Ø —É–µ–¥—É –∂–∏—Ç—å –≤ –õ–æ–Ω–¥–æ–Ωüéà"):
        st.balloons()
    st.markdown(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã—è–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–∞–∫–∏—Ö –±–æ–±–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç —Å–∞–º—ã–π –≤–∫—É—Å–Ω—ã–π —à–æ–∫–æ–ª–∞–¥. "
    )
    st.markdown(" ### –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", False):
        st.subheader('–î–∞—Ç–∞—Å–µ—Ç')
        st.write(df)
    df1 = df.copy(deep=True)

    if st.checkbox("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –ø—Ä–æ–∏—Ö–∑–≤–æ–¥–∏—Ç–µ–ª—è–º", False):
        st.subheader('–†–µ–π—Ç–∏–Ω–≥')
        dict1 = df1.groupby('Company').aggregate(np.sum)['Add'].to_dict()
        sorted_values = sorted(dict1.values())
        new_sorted_dict = {}
        for i in sorted_values:
            for j in dict1.keys():
                if dict1[j] == i:
                    new_sorted_dict[j] = dict1[j]
                    break
        st.write(new_sorted_dict)

    st.title('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    if st.sidebar.checkbox('–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'):
        st.subheader('–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:')
        st.write(df.head())
    if st.sidebar.checkbox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'):
        st.subheader('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        st.write(df.columns.to_list())
    if st.sidebar.checkbox('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ'):
        st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
        st.write(df.describe())
    st.title('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
    st.sidebar.markdown(
        "## –ú–µ–Ω—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ."
    )
    st.info(
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π"
    )
    if st.sidebar.checkbox('Count Plot'):
        st.subheader('Count Plot')
        column_count_plot_x = st.sidebar.selectbox(
            "–• –ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ", df.columns
        )
        column_count_plot_y = st.sidebar.selectbox(
            "Y –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:", df.columns.insert(0, None)
        )
        fig = sns.countplot(
            x=column_count_plot_x,
            hue=column_count_plot_y,
            data=df,
            palette="husl",
            labels=[df.columns.insert(0, None)],
        )
        st.pyplot()
    if st.sidebar.checkbox('Boxplot'):
        st.subheader('Boxplot')
        column_box_plot_X = st.sidebar.selectbox("X –ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", df.columns)
        column_box_plot_Y = st.sidebar.selectbox("Y: ", df.columns.insert(0, None))
        column_box_plot_Z = st.sidebar.selectbox(
            "Z –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:", df.columns.insert(0, None)
        )
        fig = sns.boxplot(
            x=column_box_plot_X,
            y=column_box_plot_Y,
            hue=column_box_plot_Z,
            data=df,
            palette="husl",
            labels=[df.columns.insert(0, None)],
        )
        st.pyplot()
    if st.sidebar.checkbox('Distplot'):
        st.subheader('Distplot')
        column_dist_plot = st.sidebar.selectbox("–ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", df.columns)
        fig = sns.distplot(df[column_dist_plot])
        st.pyplot()
    if st.sidebar.checkbox('Pairplot'):
        st.subheader('Pairplot')
        column_pair_plot = st.sidebar.selectbox("X –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:)", df.columns)
        fig = sns.pairplot(df, hue=column_pair_plot, palette="husl")
        st.pyplot()
    st.sidebar.markdown(
        "[–ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞](https://www.kaggle.com/datasets/rtatman/chocolate-bar-ratings)"
    )

    st.title("–ì—Ä–∞—Ñ")
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ", False):
        df2 = df.copy(deep=True)
        df3 = df2[['Specific_Bean_Origin', 'Company_Location']]
        G = nx.Graph()
        G = nx.from_pandas_edgelist(df3, 'Specific_Bean_Origin', 'Company_Location')
        fig, ax = plt.subplots()
        nx.draw_shell(G, with_labels=True)
        st.pyplot(fig)

        st.markdown("–î–∞, –Ω–µ–∫—Ä–∞—Å–∏–≤–æ, –Ω–æ –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–¥, —Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —ç—Ç–æ –≥—Ä–∞—Ñ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–∂–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞–º–∏ –∫–∞–∫–∞–æ-–±–æ–±–æ–≤.")
        img_2 = "https://github.com/fatcat-klm/vsosh/blob/main/sobaka.jpg?raw=true"
        st.image(img_2, width=500)

    st.title('–ì–µ–æ–¥–∞–Ω–Ω—ã–µ')

    def get_coords(lat, lon):
        try:
            return Point(lon, lat)
        except Exception as e:
            raise ValueError('get_coords: {} {}'.format(lat, lon))

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ", False):
        st.subheader('–ì–µ–æ–¥–∞–Ω–Ω—ã–µ')
        df_new = df.copy(deep=True)

        m = folium.Map(location=[49.867124, 9.692097], zoom_start=100)
        FastMarkerCluster(
            data=[[lat, lon] for lat, lon in zip(df_new['lat'], df_new['lon'])]
        ).add_to(m)
        folium_static(m)