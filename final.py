import streamlit as st
import pandas as pd
from PIL import Image
import matplotlib
import seaborn as sns
with st.echo(code_location='below'):
    matplotlib.use("Agg")
    st.set_option('deprecation.showPyplotGlobalUse', False)

    @st.cache(persist=True, show_spinner=True)
    def get_data(rows):
        data_url = (
            "https://github.com/fatcat-klm/vsosh2.0/raw/main/moscow%20schools%20-%20winners%20-%20moscow%20schools%20-%20winners%20(2)%20-%20moscow%20schools%20-%20winners%20-%20moscow%20schools%20-%20winners%20(2).csv.zip")
        df = pd.read_csv(data_url, nrows=rows)
        return df 

    df = get_data(50000)

    st.sidebar.subheader('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    st.sidebar.subheader('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')

    st.markdown("### –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—á–∞—Å—Ç–∏—è –º–æ—Å–∫–æ–≤—Å–∫–∏—Ö —à–∫–æ–ª –≤–æ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –û–ª–∏–º–ø–∏–∞–¥–µ –®–∫–æ–ª—å–Ω–∏–∫–æ–≤")
    img_1 = "https://github.com/fatcat-klm/vsosh/raw/main/%D0%B2%D1%81%D0%BE%D1%88%20%D0%BB%D0%BE%D0%B3%D0%BE.jpg"
    st.image(img_1, width=500)

    st.markdown(
        " **–í–°–û–®** —ç—Ç–æ —Å–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –∏ –ø—Ä–∏–∑–µ—Ä–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –í–£–ó –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–≤ –ø—Ä–∏–∑–µ—Ä–æ–º –í–°–û–® –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –±—é–¥–∂–µ—Ç ‚ú®**–°–æ–≤–±–∞–∫–∞**‚ú® –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")

    if st.button("–í—ã –≤—Å–µ —É–∂–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏üéà"):
        st.balloons()

    st.markdown(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã—è–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä,—É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è —à–∫–æ–ª–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º –≤ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ")

    st.markdown(" ### –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö")

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", False):
        st.subheader('–î–∞—Ç–∞—Å–µ—Ç')
        st.write(df)

    st.title('–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    if st.sidebar.checkbox('–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'):
        st.subheader('–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:')
        st.write(df.head())
    if st.sidebar.checkbox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'):
        st.subheader('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        st.write(df.columns.to_list())
    if st.sidebar.checkbox('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ'):
        st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
        st.write(df.describe())

    st.title('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
    st.sidebar.markdown("## –ú–µ–Ω—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    st.info("–ï—Å–ª–∏ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, —Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
    if st.sidebar.checkbox('Count Plot'):
        st.subheader('Count Plot')
        column_count_plot_x = st.sidebar.selectbox("–• –ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ", df.columns)
        column_count_plot_y = st.sidebar.selectbox("Y –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:",
                                       df.columns.insert(0, None))
        fig = sns.countplot(x=column_count_plot_x, hue=column_count_plot_y, data=df, palette="husl", labels=[df.columns.insert(0, None)])
        st.pyplot()

    if st.sidebar.checkbox('Boxplot'):
        st.subheader('Boxplot')
        column_box_plot_X = st.sidebar.selectbox("X –ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:",df.columns)
        column_box_plot_Y = st.sidebar.selectbox("Y: ",df.columns.insert(0, None))
        column_box_plot_Z = st.sidebar.selectbox("Z –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:", df.columns.insert(0, None))
        fig = sns.boxplot(x=column_box_plot_X, y=column_box_plot_Y, hue=column_box_plot_Z, data=df, palette="husl", labels=[df.columns.insert(0, None)])
        st.pyplot()

    if st.sidebar.checkbox('Distplot'):
        st.subheader('Distplot')
        column_dist_plot = st.sidebar.selectbox("–ü–æ–¥—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", df.columns)
        fig = sns.distplot(df[column_dist_plot])
        st.pyplot()

    if st.sidebar.checkbox('Pairplot'):
        st.subheader('Pairplot')
        column_pair_plot = st.sidebar.selectbox("X –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:)", df.columns)
        fig = sns.pairplot(df, hue=column_pair_plot, palette="husl")
        st.pyplot()

    st.sidebar.markdown(
        "[–ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞](https://www.kaggle.com/datasets/romazepa/moscow-schools-winners-of-educational-olympiads?resource=download)")
    st.sidebar.markdown(
        "[–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ](https://github.com/maladeep/palmerpenguins-streamlit-eda)")
    df_group_for_address = df.query('df_Year=="2019/2020"').query('df_Stage=="4"').groupby(['df_ShortName', 'Subject'], as_index=False)['df_Add'].sum()
    st.write(df_group_for_address)

    ## Importing the required modules
    import pandas as pd
    from geopy.geocoders import Nominatim
    from geopy.extra.rate_limiter import RateLimiter

    # Creating a dataframe with address of locations we want to reterive
    #locat = ['Coorg, Karnataka', 'Khajjiar, Himachal Pradesh', \
             'Chail, Himachal Pradesh', 'Pithoragarh, Uttarakhand', 'Munnar, Kerala']
    #df = pd.DataFrame({'add': locat})

    # Creating an instance of Nominatim Class
    #geolocator = Nominatim(user_agent="my_request")

    # applying the rate limiter wrapper
    #geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)

    # Applying the method to pandas DataFrame
    #df['location'] = df['add'].apply(geocode)
    #df['Lat'] = df['location'].apply(lambda x: x.latitude if x else None)
    ##df['Lon'] = df['location'].apply(lambda x: x.longitude if x else None)
    #
    #  df
